{"version":3,"sources":["utils/docx.js","App.js","reportWebVitals.js","index.js"],"names":["parseTables","xmlJsonData","tables","wTable","constructor","forEach","wTableItem","question","answers","wTableItemRowItem","rowIndex","wTableItemRowColumn","rowObject","wTableItemRowColumnItem","colIndex","wp","data","wpItem","Array","map","item","_text","length","title","correct","push","position","row","col","mapCorrectAnswer","replace","match","g1","g2","g3","_","shuffle","error","getQuestionsFromDocx","file","a","JSZip","loadAsync","zip","files","async","xml","json","xml2json","compact","spaces","JSON","parse","App","useState","questions","setQuestions","testbankName","setTestbankName","_onChangeFile","info","originFileObj","_questions","name","notification","message","getRadioStyle","indexQuestion","value","yourAnswer","backgroundColor","color","justify","Title","level","align","style","flexDirection","Dragger","onChange","customRequest","showUploadList","padding","className","InboxOutlined","margin","type","onClick","width","Group","questionIndex","event","stringify","set","target","answer","indexAnswer","display","whiteSpace","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd279f4e.chunk.js","sourcesContent":["import JSZip from \"jszip\"\r\nimport { xml2json } from \"xml-js\"\r\nimport _ from 'lodash'\r\n\r\nconst parseTables = (xmlJsonData) => {\r\n  const tables = []\r\n  try {\r\n    let wTable = xmlJsonData['w:document']['w:body']['w:tbl']\r\n    if (wTable) {\r\n      if (wTable.constructor !== [].constructor) {\r\n        wTable = [wTable]\r\n      }\r\n      wTable.forEach((wTableItem) => {\r\n        const question = {\r\n          answers: []\r\n        }\r\n        const wTableItemRow = wTableItem['w:tr']\r\n        wTableItemRow.forEach((wTableItemRowItem, rowIndex) => {\r\n          const wTableItemRowColumn = wTableItemRowItem['w:tc']\r\n          const rowObject = []\r\n          wTableItemRowColumn.forEach((wTableItemRowColumnItem, colIndex) => {\r\n            let wp = wTableItemRowColumnItem['w:p']\r\n            if (wp) {\r\n              if (wp.constructor !== [].constructor) {\r\n                wp = [wp]\r\n              }\r\n              let data = ''\r\n              wp.forEach((wpItem) => {\r\n                if (wpItem['w:r'] && wpItem['w:r'] instanceof Array) {\r\n                  wpItem['w:r'].map(item => {\r\n                    if (item['w:t'] && item['w:t']._text) {\r\n                      data += item['w:t']._text\r\n                    }\r\n                  })\r\n                }\r\n                else if (wpItem['w:r'] && wpItem['w:r']['w:t'] && wpItem['w:r']['w:t']._text) {\r\n                  data += `${wpItem['w:r']['w:t']._text}`\r\n                }\r\n              })\r\n              if (rowObject.length) {\r\n                switch (rowObject[0].data) {\r\n                  case \"H\":\r\n                    question.title = data\r\n                    break;\r\n                  case \"Đ\":\r\n                    question.correct = data\r\n                    question.answers.push(data)\r\n                    break;\r\n                  case \"K\":\r\n                    break;\r\n                  case \"M\":\r\n                    break;\r\n                  default:\r\n                    question.answers.push(data)\r\n                    break;\r\n                }\r\n              }\r\n              else {\r\n                rowObject.push({\r\n                  position: {\r\n                    row: rowIndex,\r\n                    col: colIndex\r\n                  },\r\n                  data\r\n                })\r\n              }\r\n            }\r\n          })\r\n        })\r\n        const mapCorrectAnswer = question.correct.replace(/(\\{\\T)(\\d)(\\})/g, (match, g1, g2, g3) => {\r\n          return question.answers[g2]\r\n        })\r\n        question.answers[0] = mapCorrectAnswer;\r\n        question.answers = _.shuffle(question.answers)\r\n        question.correct = mapCorrectAnswer;\r\n        tables.push(question)\r\n      })\r\n    }\r\n  } catch (error) {\r\n    return error\r\n  }\r\n\r\n  return _.shuffle(tables)\r\n}\r\n\r\nexport const getQuestionsFromDocx = async (file) => {\r\n  const zip = await JSZip.loadAsync(file)\r\n  if (!zip.files['word/document.xml']) {\r\n    return []\r\n  }\r\n  const xml = await zip.files['word/document.xml'].async(\"text\");\r\n  const json = xml2json(xml, { compact: true, spaces: 4, });\r\n  if (!json) {\r\n    return []\r\n  }\r\n  if (typeof json === 'string') {\r\n    return parseTables(JSON.parse(json))\r\n  }\r\n  return parseTables(json)\r\n}","import { Typography, Row, Upload, notification, Radio, Divider, Button } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons';\nimport { getQuestionsFromDocx } from \"utils/docx\";\nimport { useState } from 'react';\nimport _ from 'lodash'\n\nconst App = () => {\n  const [questions, setQuestions] = useState([]);\n  const [testbankName, setTestbankName] = useState(\"\")\n\n  const _onChangeFile = async (info) => {\n    const _questions = await getQuestionsFromDocx(info.file.originFileObj);\n    if (_questions && _questions instanceof Array) {\n      setQuestions((_questions))\n      setTestbankName(info.file.name)\n    }\n    else {\n      notification.error({\n        message: \"Upload đúng file đi baaa :)\"\n      })\n    }\n  }\n\n  const _onChooseAnswer = (questionIndex) => (event) => {\n    const _questions = JSON.parse(JSON.stringify(questions));\n    _.set(_questions, questionIndex, {\n      ..._questions[questionIndex],\n      yourAnswer: event.target.value\n    })\n    setQuestions(_questions)\n  }\n\n  const _reload = () => {\n    const _questions = questions.map(question => ({\n      title: question.title,\n      correct: question.correct,\n      answers: _.shuffle(question.answers),\n    }))\n\n    setQuestions(_.shuffle(_questions))\n  }\n\n  const getRadioStyle = (indexQuestion, value) => {\n    if (questions[indexQuestion].yourAnswer === questions[indexQuestion].correct && questions[indexQuestion].yourAnswer === value) {\n      return {\n        backgroundColor: \"#16c79a\",\n        color: \"white\",\n      }\n    }\n    if (questions[indexQuestion].yourAnswer !== questions[indexQuestion].correct && questions[indexQuestion].yourAnswer === value) {\n      return {\n        backgroundColor: \"#ff414d\",\n        color: \"white\",\n      }\n    }\n    return {\n      backgroundColor: \"white\"\n    }\n  }\n  return (\n    <>\n      <Row justify=\"center\">\n        <Typography.Title level={2}>\n          Kiểm tra QLDAPM\n        </Typography.Title>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ flexDirection: \"column\" }}>\n        <Upload.Dragger\n          name='file'\n          onChange={_onChangeFile}\n          customRequest={() => { }}\n          showUploadList={false}\n          style={{ padding: 24 }}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Chọn hoặc kéo file testbank.docx vào đây</p>\n          <p className=\"ant-upload-hint\">\n            {testbankName}\n          </p>\n        </Upload.Dragger>\n        <span style={{ margin: 4 }} />\n        {\n          questions.length ? (\n            <Button type=\"primary\" onClick={_reload} style={{ width: \"fit-content\" }}>\n              Test lại\n            </Button>\n          ) :\n            null\n        }\n      </Row>\n      <div style={{ padding: 28 }}>\n        {\n          questions.map((question, indexQuestion) => (\n            <>\n              <Row key={indexQuestion} style={{ flexDirection: \"column\" }}>\n                <Typography.Title level={4}>\n                  Câu {indexQuestion + 1}: {question.title}\n                </Typography.Title>\n                <Radio.Group onChange={_onChooseAnswer(indexQuestion)}>\n                  {\n                    (question.answers).map((answer, indexAnswer) => (\n                      answer && <Radio\n                        style={{\n                          display: \"block\",\n                          whiteSpace: \"break-spaces\",\n                          borderRadius: 5,\n                          ...getRadioStyle(indexQuestion, answer)\n                        }}\n                        value={answer}\n                        key={indexAnswer}\n                      >\n                        {answer.replace(/\\n/g, \"\")}\n                      </Radio>\n                    ))\n                  }\n                </Radio.Group>\n              </Row>\n              <Divider />\n            </>\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.less';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}